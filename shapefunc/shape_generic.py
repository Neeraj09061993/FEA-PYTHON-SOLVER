import numpy as np


class Lagsf1(object):

    def __init__(self, X, d):

        self.X = X
        self.d = d

    def f(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0.5 - 0.5 * X, 0.5 * X + 0.5]) # Linear element
        if d == 2:
            return np.array([0.5 * X * (X - 1.0), 0.5 * X * (X + 1.0), -1.0 * (X - 1.0) * (X + 1.0)]) # Qudratic element
        if d == 3:
            return np.array([-0.5625 * (X - 1.0) * (X - 0.333333333333333) * (X + 0.333333333333333),
                             0.5625 * (X - 0.333333333333333) * (X + 0.333333333333333) * (X + 1.0),
                             1.6875 * (X - 1.0) * (X - 0.333333333333333) * (X + 1.0),
                             -1.6875 * (X - 1.0) * (X + 0.333333333333333) * (X + 1.0)]) # Cubic element
        if d == 4:
            return np.array([0.666666666666667 * X * (X - 1.0) * (X - 0.5) * (X + 0.5),
                             0.666666666666667 * X * (X - 0.5) * (X + 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X - 0.5) * (X + 1.0),
                             4.0 * (X - 1.0) * (X - 0.5) * (X + 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X + 0.5) * (X + 1.0)])
        if d == 5:
            return np.array([-0.813802083333333 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 0.6),
                             0.813802083333334 * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 0.6) * (X + 1.0),
                             4.06901041666666 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 1.0),
                             -8.13802083333333 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.6) * (X + 1.0),
                             8.13802083333333 * (X - 1.0) * (X - 0.6) * (X + 0.2) * (X + 0.6) * (X + 1.0),
                             -4.06901041666667 * (X - 1.0) * (X - 0.2) * (X + 0.2) * (X + 0.6) * (X + 1.0)])

    def fx(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([-0.500000000000000, 0.500000000000000])
        if d == 2:
            return np.array([1.0 * X - 0.5, 1.0 * X + 0.5, -2.0 * X])
        if d == 3:
            return np.array([(0.5625 - 0.5625 * X) * (X - 0.333333333333333) + (-0.5625 * X - 0.1875) * (X - 1.0) + (
                        -0.5625 * X - 0.1875) * (X - 0.333333333333333),
                             (0.5625 * X + 0.1875) * (X - 0.333333333333333) + (0.5625 * X + 0.5625) * (
                                         X - 0.333333333333333) + (0.5625 * X + 0.5625) * (X + 0.333333333333333),
                             (X - 1.0) * (1.6875 * X + 1.6875) + (X - 0.333333333333333) * (1.6875 * X - 1.6875) + (
                                         X - 0.333333333333333) * (1.6875 * X + 1.6875),
                             (-1.6875 * X - 1.6875) * (X - 1.0) + (-1.6875 * X - 1.6875) * (X + 0.333333333333333) + (
                                         -1.6875 * X - 0.5625) * (X - 1.0)])
        if d == 4:
            return np.array([0.666666666666667 * X * (X - 1.0) * (X - 0.5) + 0.666666666666667 * X * (X - 1.0) * (
                        X + 0.5) + 0.666666666666667 * X * (X - 0.5) * (X + 0.5) + (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 1.0) * (X - 0.5),
                             0.666666666666667 * X * (X - 0.5) * (X + 0.5) + 0.666666666666667 * X * (X - 0.5) * (
                                         X + 1.0) + 0.666666666666667 * X * (X + 0.5) * (X + 1.0) + (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X - 0.5) - 2.66666666666667 * X * (X - 1.0) * (
                                         X + 1.0) - 2.66666666666667 * X * (X - 0.5) * (X + 1.0) + (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) * (X - 0.5),
                             (X - 1.0) * (X - 0.5) * (4.0 * X + 2.0) + (X - 1.0) * (X - 0.5) * (4.0 * X + 4.0) + (
                                         X - 1.0) * (X + 1.0) * (4.0 * X + 2.0) + (X - 0.5) * (X + 1.0) * (
                                         4.0 * X + 2.0),
                             -2.66666666666667 * X * (X - 1.0) * (X + 0.5) - 2.66666666666667 * X * (X - 1.0) * (
                                         X + 1.0) - 2.66666666666667 * X * (X + 0.5) * (X + 1.0) + (
                                         -2.66666666666667 * X - 1.33333333333333) * (X - 1.0) * (X + 1.0)])
        if d == 5:
            return np.array([(-0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                        -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) + (-0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (
                                         X - 0.2) * (X + 0.6) + (-0.813802083333333 * X - 0.162760416666667) * (
                                         X - 0.6) * (X - 0.2) * (X + 0.6),
                             (0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X - 0.2) * (X + 0.6) + (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X - 0.2) * (
                                         X + 0.2) + (0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (
                                         X - 0.2) * (X + 0.6) + (0.813802083333334 * X + 0.813802083333334) * (
                                         X - 0.6) * (X + 0.2) * (X + 0.6) + (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.2) * (X + 0.6),
                             (X - 1.0) * (X - 0.6) * (X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + (
                                         X - 1.0) * (X - 0.6) * (X - 0.2) * (
                                         4.06901041666666 * X + 4.06901041666666) + (X - 1.0) * (X - 0.6) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + (X - 1.0) * (
                                         X - 0.2) * (X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + (
                                         X - 0.6) * (X - 0.2) * (X + 0.2) * (4.06901041666666 * X + 4.06901041666666),
                             (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) + (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (
                                         X - 0.2) * (X + 0.6) + (-8.13802083333333 * X - 8.13802083333333) * (
                                         X - 0.6) * (X - 0.2) * (X + 0.6) + (-8.13802083333333 * X - 4.8828125) * (
                                         X - 1.0) * (X - 0.6) * (X - 0.2),
                             (X - 1.0) * (X - 0.6) * (X + 0.2) * (8.13802083333333 * X + 8.13802083333333) + (
                                         X - 1.0) * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) * (8.13802083333333 * X + 8.13802083333333) + (X - 1.0) * (
                                         X + 0.2) * (X + 0.6) * (8.13802083333333 * X + 8.13802083333333) + (
                                         X - 0.6) * (X + 0.2) * (X + 0.6) * (8.13802083333333 * X + 8.13802083333333),
                             (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) * (X + 0.2) + (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) + (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (
                                         X + 0.2) * (X + 0.6) + (-4.06901041666667 * X - 4.06901041666667) * (
                                         X - 0.2) * (X + 0.2) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6)])

    def fx2(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0, 0])
        if d == 2:
            return np.array([1.00000000000000, 1.00000000000000, -2.00000000000000])
        if d == 3:
            return np.array([1.125 - 3.375 * X, 3.375 * X + 1.125, 10.125 * X - 1.125, -10.125 * X - 1.125])
        if d == 4:
            return np.array([1.33333333333333 * X * (X - 1.0) + 1.33333333333333 * X * (
                        X - 0.5) + 1.33333333333333 * X * (X + 0.5) + 2 * (
                                         0.666666666666667 * X - 0.333333333333333) * (X - 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5),
                             1.33333333333333 * X * (X - 0.5) + 1.33333333333333 * X * (
                                         X + 0.5) + 1.33333333333333 * X * (X + 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X + 1.0) + 2 * (
                                         0.666666666666667 * X + 0.666666666666667) * (X - 0.5),
                             -5.33333333333333 * X * (X - 1.0) - 5.33333333333333 * X * (
                                         X - 0.5) - 5.33333333333333 * X * (X + 1.0) + (
                                         1.33333333333333 - 2.66666666666667 * X) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 0.5) - 2.66666666666667 * (
                                         X - 1.0) * (X - 0.5),
                             2 * (X - 1.0) * (4.0 * X - 2.0) + 2 * (X - 1.0) * (4.0 * X + 2.0) + 2 * (X - 1.0) * (
                                         4.0 * X + 4.0) + 2 * (X - 0.5) * (4.0 * X + 2.0) + 2 * (X - 0.5) * (
                                         4.0 * X + 4.0) + 2 * (X + 1.0) * (4.0 * X + 2.0),
                             -5.33333333333333 * X * (X - 1.0) - 5.33333333333333 * X * (
                                         X + 0.5) - 5.33333333333333 * X * (X + 1.0) + (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 1.33333333333333) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 1.33333333333333) * (X + 1.0) - 2.66666666666667 * (
                                         X - 1.0) * (X + 1.0)])
        if d == 5:
            return np.array([(-0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.6) + (
                        -0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.2) + (
                                         -0.813802083333333 * X - 0.48828125) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.6) * (X + 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.2) * (
                                         X + 0.6) - 1.62760416666667 * (X - 1.0) * (X - 0.6) * (
                                         X - 0.2) - 0.813802083333333 * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) - 0.813802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 0.813802083333333 * (X - 0.6) * (X - 0.2) * (X + 0.6),
                             2 * (0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.162760416666667) * (X - 0.2) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.48828125) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X + 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X + 0.2) * (X + 0.6),
                             2 * (X - 1.0) * (X - 0.6) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 1.0) * (
                                         X - 0.6) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 1.0) * (
                                         X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 1.0) * (
                                         X - 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 1.0) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X - 4.06901041666666) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.6) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.2) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666),
                             2 * (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.6) * (X + 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.2) * (X + 0.6) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) * (X - 0.6) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) * (X - 0.2) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 0.6) * (
                                         X - 0.2) - 16.2760416666667 * (X - 1.0) * (X - 0.6) * (
                                         X - 0.2) - 8.13802083333333 * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) - 8.13802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 8.13802083333333 * (X - 0.6) * (X - 0.2) * (X + 0.6),
                             2 * (X - 1.0) * (X - 0.6) * (8.13802083333333 * X + 1.62760416666667) + 2 * (X - 1.0) * (
                                         X - 0.6) * (8.13802083333333 * X + 4.8828125) + 2 * (X - 1.0) * (X - 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 1.0) * (X + 0.2) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 1.0) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + 2 * (X - 1.0) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 0.6) * (X + 0.2) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + 2 * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X + 0.2) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333),
                             2 * (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X + 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 0.2) * (X + 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 0.2) * (X + 0.6) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X + 0.2) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X - 0.2) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.2) - 8.13802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 1.0) * (X + 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 0.2) * (X + 0.2) * (X + 0.6)])

    def fx3(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0, 0])
        if d == 2:
            return np.array([0, 0, 0])
        if d == 3:
            return np.array([-3.37500000000000, 3.37500000000000, 10.1250000000000, -10.1250000000000])
        if d == 4:
            return np.array([16.0 * X - 4.0, 16.0 * X + 4.0, 8.0 - 64.0 * X, 96.0 * X, -64.0 * X - 8.0])
        if d == 5:
            return np.array([(0.162760416666667 - 0.813802083333333 * X) * (X - 0.6) + (
                        0.325520833333333 - 1.62760416666667 * X) * (X - 0.6) + (
                                         0.813802083333333 - 0.813802083333333 * X) * (X - 0.6) + (
                                         0.813802083333333 - 0.813802083333333 * X) * (X - 0.2) + (
                                         1.62760416666667 - 1.62760416666667 * X) * (X - 0.6) + (
                                         1.62760416666667 - 1.62760416666667 * X) * (X - 0.2) + 4 * (
                                         -0.813802083333333 * X - 0.48828125) * (X - 1.0) + 4 * (
                                         -0.813802083333333 * X - 0.48828125) * (X - 0.6) + 4 * (
                                         -0.813802083333333 * X - 0.48828125) * (X - 0.2) + 3 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (2 * X - 2.0) + 3 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (2 * X - 1.2) + 3 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (2 * X - 0.4) + 3 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (
                                         2 * X + 1.2) - 0.813802083333333 * (X - 1.0) * (
                                         X - 0.6) - 0.813802083333333 * (X - 1.0) * (X - 0.2) - 0.813802083333333 * (
                                         X - 1.0) * (2 * X + 1.2) - 0.813802083333333 * (X - 0.6) * (
                                         X - 0.2) - 0.813802083333333 * (X - 0.6) * (
                                         2 * X - 2.0) - 0.813802083333333 * (X - 0.6) * (
                                         2 * X - 0.4) - 0.813802083333333 * (X - 0.6) * (
                                         2 * X + 1.2) - 0.813802083333333 * (X - 0.2) * (
                                         2 * X - 2.0) - 0.813802083333333 * (X - 0.2) * (2 * X + 1.2),
                             2 * (0.813802083333334 * X + 0.162760416666667) * (2 * X + 1.2) + 3 * (
                                         0.813802083333334 * X + 0.813802083333334) * (2 * X + 0.4) + 3 * (X - 0.6) * (
                                         1.62760416666667 * X - 0.325520833333334) + 3 * (X - 0.6) * (
                                         1.62760416666667 * X + 0.325520833333333) + 3 * (X - 0.6) * (
                                         1.62760416666667 * X + 0.9765625) + 3 * (X - 0.6) * (
                                         1.62760416666667 * X + 1.62760416666667) + 3 * (X - 0.2) * (
                                         1.62760416666667 * X + 0.325520833333333) + 3 * (X - 0.2) * (
                                         1.62760416666667 * X + 0.9765625) + 3 * (X - 0.2) * (
                                         1.62760416666667 * X + 1.62760416666667) + (X + 0.6) * (
                                         1.62760416666667 * X + 0.325520833333333) + 3 * (X + 0.6) * (
                                         1.62760416666667 * X + 1.62760416666667),
                             3 * (X - 1.0) * (8.13802083333333 * X + 1.62760416666666) + 3 * (X - 1.0) * (
                                         8.13802083333333 * X + 8.13802083333333) + 4.06901041666666 * (X - 0.6) * (
                                         2 * X - 0.4) + 2 * (X - 0.6) * (
                                         8.13802083333333 * X - 8.13802083333333) + 2 * (X - 0.6) * (
                                         8.13802083333333 * X - 1.62760416666667) + 3 * (X - 0.6) * (
                                         8.13802083333333 * X + 1.62760416666666) + 3 * (X - 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 0.2) * (
                                         8.13802083333333 * X - 8.13802083333333) + 3 * (X - 0.2) * (
                                         8.13802083333333 * X + 1.62760416666666) + 3 * (X - 0.2) * (
                                         8.13802083333333 * X + 8.13802083333333) + (2 * X - 1.2) * (
                                         4.06901041666666 * X - 4.06901041666666) + (2 * X - 0.4) * (
                                         4.06901041666666 * X - 4.06901041666666) + 3 * (2 * X + 0.4) * (
                                         4.06901041666666 * X + 4.06901041666666),
                             (1.62760416666667 - 8.13802083333333 * X) * (X - 0.6) + (
                                         3.25520833333334 - 16.2760416666667 * X) * (X - 0.6) + (
                                         8.13802083333333 - 8.13802083333333 * X) * (X - 0.6) + (
                                         8.13802083333333 - 8.13802083333333 * X) * (X - 0.2) + (
                                         16.2760416666667 - 16.2760416666667 * X) * (X - 0.6) + (
                                         16.2760416666667 - 16.2760416666667 * X) * (X - 0.2) + 3 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (2 * X - 2.0) + 3 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (2 * X - 1.2) + 3 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (2 * X - 0.4) + 3 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (2 * X + 1.2) + 4 * (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) + 4 * (
                                         -8.13802083333333 * X - 4.8828125) * (X - 0.6) + 4 * (
                                         -8.13802083333333 * X - 4.8828125) * (X - 0.2) - 8.13802083333333 * (
                                         X - 1.0) * (X - 0.6) - 8.13802083333333 * (X - 1.0) * (
                                         X - 0.2) - 8.13802083333333 * (X - 1.0) * (2 * X + 1.2) - 8.13802083333333 * (
                                         X - 0.6) * (X - 0.2) - 8.13802083333333 * (X - 0.6) * (
                                         2 * X - 2.0) - 8.13802083333333 * (X - 0.6) * (
                                         2 * X - 0.4) - 8.13802083333333 * (X - 0.6) * (
                                         2 * X + 1.2) - 8.13802083333333 * (X - 0.2) * (
                                         2 * X - 2.0) - 8.13802083333333 * (X - 0.2) * (2 * X + 1.2),
                             3 * (X - 1.0) * (16.2760416666667 * X + 3.25520833333333) + 3 * (X - 1.0) * (
                                         16.2760416666667 * X + 9.765625) + 3 * (X - 1.0) * (
                                         16.2760416666667 * X + 16.2760416666667) + 3 * (X - 0.6) * (
                                         16.2760416666667 * X - 16.2760416666667) + 3 * (X - 0.6) * (
                                         16.2760416666667 * X + 3.25520833333333) + 3 * (X - 0.6) * (
                                         16.2760416666667 * X + 9.765625) + 3 * (X - 0.6) * (
                                         16.2760416666667 * X + 16.2760416666667) + 3 * (X + 0.6) * (
                                         16.2760416666667 * X + 3.25520833333333) + 3 * (X + 0.6) * (
                                         16.2760416666667 * X + 16.2760416666667) + 3 * (2 * X + 0.4) * (
                                         8.13802083333333 * X + 8.13802083333333),
                             (4.06901041666667 - 4.06901041666667 * X) * (X - 0.2) + (
                                         8.13802083333333 - 8.13802083333333 * X) * (X - 0.2) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 0.2) + 3 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (2 * X - 2.0) + 3 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (2 * X - 0.4) + 3 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (2 * X + 0.4) + 3 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (2 * X + 1.2) + (
                                         -4.06901041666667 * X - 2.44140625) * (X - 1.0) + (
                                         -4.06901041666667 * X - 2.44140625) * (X - 0.2) + 4 * (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) + 4 * (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 0.2) + 4 * (
                                         -4.06901041666667 * X - 0.813802083333333) * (X + 0.6) - 4.06901041666667 * (
                                         X - 1.0) * (X - 0.2) - 4.06901041666667 * (X - 1.0) * (
                                         X + 0.6) - 4.06901041666667 * (X - 1.0) * (2 * X + 0.4) - 4.06901041666667 * (
                                         X - 1.0) * (2 * X + 1.2) - 4.06901041666667 * (X - 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 0.2) * (2 * X - 2.0) - 4.06901041666667 * (
                                         X - 0.2) * (2 * X + 0.4) - 4.06901041666667 * (X - 0.2) * (
                                         2 * X + 1.2) - 4.06901041666667 * (X + 0.6) * (2 * X + 0.4)])

    def fx4(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0, 0])
        if d == 2:
            return np.array([0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0])
        if d == 4:
            return np.array(
                [16.0000000000000, 16.0000000000000, -64.0000000000000, 96.0000000000000, -64.0000000000000])
        if d == 5:
            return np.array([19.53125 - 97.6562499999999 * X, 97.65625 * X + 19.53125, 488.281249999999 * X - 58.59375,
                             39.0625 - 976.5625 * X, 976.5625 * X + 39.0624999999999, -488.28125 * X - 58.59375])

    def fx5(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0, 0])
        if d == 2:
            return np.array([0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 0, 0, 0])
        if d == 5:
            return np.array([-97.6562499999999, 97.6562500000000, 488.281249999999, -976.562500000000, 976.562500000000,
                             -488.281250000000])

    def fx6(self):
        d = self.d
        X = self.X
        if d == 1:
            return np.array([0, 0])
        if d == 2:
            return np.array([0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 0, 0, 0])
        if d == 5:
            return np.array([0, 0, 0, 0, 0, 0])
