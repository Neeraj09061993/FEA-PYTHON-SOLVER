import numpy as np


class Lagsf2(object):

    def __init__(self, X, Y, d):

        self.X = X
        self.Y = Y
        self.d = d

    def f(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([X, Y, -X - Y + 1])
        if d == 2:
            return np.array(
                [X * (2 * X - 1), Y * (2 * Y - 1), (-2 * X - 2 * Y + 1) * (-2 * X - 2 * Y + 2) / 2, 4 * X * Y,
                 2 * Y * (-2 * X - 2 * Y + 2), 2 * X * (-2 * X - 2 * Y + 2)])
        if d == 3:
            return np.array([X * (3 * X - 2) * (3 * X - 1) / 2, Y * (3 * Y - 2) * (3 * Y - 1) / 2,
                             (-3 * X - 3 * Y + 1) * (-3 * X - 3 * Y + 2) * (-3 * X - 3 * Y + 3) / 6,
                             9 * X * Y * (3 * X - 1) / 2, 9 * X * Y * (3 * Y - 1) / 2,
                             3 * Y * (3 * Y - 1) * (-3 * X - 3 * Y + 3) / 2,
                             3 * Y * (-3 * X - 3 * Y + 2) * (-3 * X - 3 * Y + 3) / 2,
                             3 * X * (-3 * X - 3 * Y + 2) * (-3 * X - 3 * Y + 3) / 2,
                             3 * X * (3 * X - 1) * (-3 * X - 3 * Y + 3) / 2, 9 * X * Y * (-3 * X - 3 * Y + 3)])
        if d == 4:
            return np.array(
                [X * (4 * X - 3) * (4 * X - 2) * (4 * X - 1) / 6, Y * (4 * Y - 3) * (4 * Y - 2) * (4 * Y - 1) / 6,
                 (-4 * X - 4 * Y + 1) * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) / 24,
                 8 * X * Y * (4 * X - 2) * (4 * X - 1) / 3, 4 * X * Y * (4 * X - 1) * (4 * Y - 1),
                 8 * X * Y * (4 * Y - 2) * (4 * Y - 1) / 3,
                 2 * Y * (4 * Y - 2) * (4 * Y - 1) * (-4 * X - 4 * Y + 4) / 3,
                 Y * (4 * Y - 1) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4),
                 2 * Y * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) / 3,
                 2 * X * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) / 3,
                 X * (4 * X - 1) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4),
                 2 * X * (4 * X - 2) * (4 * X - 1) * (-4 * X - 4 * Y + 4) / 3,
                 8 * X * Y * (4 * X - 1) * (-4 * X - 4 * Y + 4), 8 * X * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 4),
                 8 * X * Y * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4)])

    def fx(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([1, 0, -1])
        if d == 2:
            return np.array([4 * X - 1, 0, 4 * X + 4 * Y - 3, 4 * Y, -4 * Y, -8 * X - 4 * Y + 4])
        if d == 3:
            return np.array([3 * X * (3 * X - 2) / 2 + 3 * X * (3 * X - 1) / 2 + (3 * X / 2 - 1 / 2) * (3 * X - 2), 0,
                             -3 * (-3 * X - 3 * Y + 2) * (-X / 2 - Y / 2 + 1 / 6) + (-3 * X - 3 * Y + 3) * (
                                     3 * X / 2 + 3 * Y / 2 - 1) + (-3 * X - 3 * Y + 3) * (
                                     3 * X / 2 + 3 * Y / 2 - 1 / 2), 27 * X * Y / 2 + 9 * Y * (3 * X - 1) / 2,
                             9 * Y * (3 * Y - 1) / 2, -9 * Y * (3 * Y - 1) / 2,
                             -9 * Y * (-3 * X - 3 * Y + 2) / 2 - 9 * Y * (-3 * X - 3 * Y + 3) / 2,
                             -9 * X * (-3 * X - 3 * Y + 2) / 2 - 9 * X * (-3 * X - 3 * Y + 3) / 2 + (
                                     -9 * X / 2 - 9 * Y / 2 + 3) * (-3 * X - 3 * Y + 3),
                             -9 * X * (3 * X - 1) / 2 + 9 * X * (-3 * X - 3 * Y + 3) / 2 + (9 * X / 2 - 3 / 2) * (
                                     -3 * X - 3 * Y + 3), -27 * X * Y + 9 * Y * (-3 * X - 3 * Y + 3)])
        if d == 4:
            return np.array([2 * X * (4 * X - 3) * (4 * X - 2) / 3 + 2 * X * (4 * X - 3) * (4 * X - 1) / 3 + 2 * X * (
                    4 * X - 2) * (4 * X - 1) / 3 + (2 * X / 3 - 1 / 6) * (4 * X - 3) * (4 * X - 2), 0,
                             -4 * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) * (-X / 6 - Y / 6 + 1 / 24) - 4 * (
                                     -4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 4) * (-X / 6 - Y / 6 + 1 / 24) + (
                                     -4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) * (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) + (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) * (2 * X / 3 + 2 * Y / 3 - 1 / 6),
                             32 * X * Y * (4 * X - 2) / 3 + 32 * X * Y * (4 * X - 1) / 3 + 8 * Y * (4 * X - 2) * (
                                     4 * X - 1) / 3, 16 * X * Y * (4 * Y - 1) + 4 * Y * (4 * X - 1) * (4 * Y - 1),
                             8 * Y * (4 * Y - 2) * (4 * Y - 1) / 3, -8 * Y * (4 * Y - 2) * (4 * Y - 1) / 3,
                             -4 * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 3) - 4 * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 4),
                             -8 * Y * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) / 3 - 8 * Y * (-4 * X - 4 * Y + 2) * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * Y * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3,
                             -8 * X * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) / 3 - 8 * X * (-4 * X - 4 * Y + 2) * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * X * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 + (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) * (
                                     -8 * X / 3 - 8 * Y / 3 + 4 / 3),
                             -4 * X * (4 * X - 1) * (-4 * X - 4 * Y + 3) - 4 * X * (4 * X - 1) * (
                                     -4 * X - 4 * Y + 4) + 4 * X * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) + (
                                     4 * X - 1) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4),
                             -8 * X * (4 * X - 2) * (4 * X - 1) / 3 + 8 * X * (4 * X - 2) * (
                                     -4 * X - 4 * Y + 4) / 3 + 8 * X * (4 * X - 1) * (-4 * X - 4 * Y + 4) / 3 + (
                                     8 * X / 3 - 2 / 3) * (4 * X - 2) * (-4 * X - 4 * Y + 4),
                             -32 * X * Y * (4 * X - 1) + 32 * X * Y * (-4 * X - 4 * Y + 4) + 8 * Y * (4 * X - 1) * (
                                     -4 * X - 4 * Y + 4),
                             -32 * X * Y * (4 * Y - 1) + 8 * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 4),
                             -32 * X * Y * (-4 * X - 4 * Y + 3) - 32 * X * Y * (-4 * X - 4 * Y + 4) + 8 * Y * (
                                     -4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4)])

    def fy(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 1, -1])
        if d == 2:
            return np.array([0, 4 * Y - 1, 4 * X + 4 * Y - 3, 4 * X, -4 * X - 8 * Y + 4, -4 * X])
        if d == 3:
            return np.array([0, 3 * Y * (3 * Y - 2) / 2 + 3 * Y * (3 * Y - 1) / 2 + (3 * Y / 2 - 1 / 2) * (3 * Y - 2),
                             -3 * (-3 * X - 3 * Y + 2) * (-X / 2 - Y / 2 + 1 / 6) + (-3 * X - 3 * Y + 3) * (
                                     3 * X / 2 + 3 * Y / 2 - 1) + (-3 * X - 3 * Y + 3) * (
                                     3 * X / 2 + 3 * Y / 2 - 1 / 2), 9 * X * (3 * X - 1) / 2,
                             27 * X * Y / 2 + 9 * X * (3 * Y - 1) / 2,
                             -9 * Y * (3 * Y - 1) / 2 + 9 * Y * (-3 * X - 3 * Y + 3) / 2 + (9 * Y / 2 - 3 / 2) * (
                                     -3 * X - 3 * Y + 3),
                             -9 * Y * (-3 * X - 3 * Y + 2) / 2 - 9 * Y * (-3 * X - 3 * Y + 3) / 2 + (
                                     -9 * X / 2 - 9 * Y / 2 + 3) * (-3 * X - 3 * Y + 3),
                             -9 * X * (-3 * X - 3 * Y + 2) / 2 - 9 * X * (-3 * X - 3 * Y + 3) / 2,
                             -9 * X * (3 * X - 1) / 2, -27 * X * Y + 9 * X * (-3 * X - 3 * Y + 3)])
        if d == 4:
            return np.array([0,
                             2 * Y * (4 * Y - 3) * (4 * Y - 2) / 3 + 2 * Y * (4 * Y - 3) * (4 * Y - 1) / 3 + 2 * Y * (
                                     4 * Y - 2) * (4 * Y - 1) / 3 + (2 * Y / 3 - 1 / 6) * (4 * Y - 3) * (4 * Y - 2),
                             -4 * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) * (-X / 6 - Y / 6 + 1 / 24) - 4 * (
                                     -4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 4) * (-X / 6 - Y / 6 + 1 / 24) + (
                                     -4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) * (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) + (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) * (2 * X / 3 + 2 * Y / 3 - 1 / 6),
                             8 * X * (4 * X - 2) * (4 * X - 1) / 3,
                             16 * X * Y * (4 * X - 1) + 4 * X * (4 * X - 1) * (4 * Y - 1),
                             32 * X * Y * (4 * Y - 2) / 3 + 32 * X * Y * (4 * Y - 1) / 3 + 8 * X * (4 * Y - 2) * (
                                     4 * Y - 1) / 3,
                             -8 * Y * (4 * Y - 2) * (4 * Y - 1) / 3 + 8 * Y * (4 * Y - 2) * (
                                     -4 * X - 4 * Y + 4) / 3 + 8 * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 4) / 3 + (
                                     8 * Y / 3 - 2 / 3) * (4 * Y - 2) * (-4 * X - 4 * Y + 4),
                             -4 * Y * (4 * Y - 1) * (-4 * X - 4 * Y + 3) - 4 * Y * (4 * Y - 1) * (
                                     -4 * X - 4 * Y + 4) + 4 * Y * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) + (
                                     4 * Y - 1) * (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4),
                             -8 * Y * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) / 3 - 8 * Y * (-4 * X - 4 * Y + 2) * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * Y * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 + (-4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) * (
                                     -8 * X / 3 - 8 * Y / 3 + 4 / 3),
                             -8 * X * (-4 * X - 4 * Y + 2) * (-4 * X - 4 * Y + 3) / 3 - 8 * X * (-4 * X - 4 * Y + 2) * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * X * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3,
                             -4 * X * (4 * X - 1) * (-4 * X - 4 * Y + 3) - 4 * X * (4 * X - 1) * (-4 * X - 4 * Y + 4),
                             -8 * X * (4 * X - 2) * (4 * X - 1) / 3,
                             -32 * X * Y * (4 * X - 1) + 8 * X * (4 * X - 1) * (-4 * X - 4 * Y + 4),
                             -32 * X * Y * (4 * Y - 1) + 32 * X * Y * (-4 * X - 4 * Y + 4) + 8 * X * (4 * Y - 1) * (
                                     -4 * X - 4 * Y + 4),
                             -32 * X * Y * (-4 * X - 4 * Y + 3) - 32 * X * Y * (-4 * X - 4 * Y + 4) + 8 * X * (
                                     -4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4)])

    def fxy(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 4, 4, -4, -4])
        if d == 3:
            return np.array(
                [0, 0, -27 * X - 27 * Y + 18, 27 * X - 9 / 2, 27 * Y - 9 / 2, 9 / 2 - 27 * Y, 27 * X + 54 * Y - 45 / 2,
                 54 * X + 27 * Y - 45 / 2, 9 / 2 - 27 * X, -54 * X - 54 * Y + 27])
        if d == 4:
            return np.array([0, 0, 2 * (-64 * X - 64 * Y + 32) * (-X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 48) * (
                    -X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 64) * (-X / 6 - Y / 6 + 1 / 24) + 4 * (
                                     -4 * X - 4 * Y + 3) * (-4 * X - 4 * Y + 4) / 3 - (-4 * X - 4 * Y + 3) * (
                                     16 * X + 16 * Y - 8) / 6 - (-4 * X - 4 * Y + 4) * (16 * X + 16 * Y - 8) / 6 + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 12) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 12),
                             32 * X * (4 * X - 2) / 3 + 32 * X * (4 * X - 1) / 3 + (4 * X - 2) * (32 * X / 3 - 8 / 3),
                             64 * X * Y + 16 * X * (4 * Y - 1) + 16 * Y * (4 * X - 1) + (16 * X - 4) * (4 * Y - 1),
                             32 * Y * (4 * Y - 2) / 3 + 32 * Y * (4 * Y - 1) / 3 + (4 * Y - 2) * (32 * Y / 3 - 8 / 3),
                             -32 * Y * (4 * Y - 2) / 3 - 32 * Y * (4 * Y - 1) / 3 + (8 / 3 - 32 * Y / 3) * (4 * Y - 2),
                             32 * Y * (4 * Y - 1) - 16 * Y * (-4 * X - 4 * Y + 3) - 16 * Y * (-4 * X - 4 * Y + 4) + (
                                     4 - 16 * Y) * (-4 * X - 4 * Y + 3) + (4 - 16 * Y) * (-4 * X - 4 * Y + 4),
                             64 * Y * (-4 * X - 4 * Y + 2) / 3 + 64 * Y * (-4 * X - 4 * Y + 3) / 3 + 64 * Y * (
                                     -4 * X - 4 * Y + 4) / 3 + (-4 * X - 4 * Y + 3) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 8) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3),
                             64 * X * (-4 * X - 4 * Y + 2) / 3 + 64 * X * (-4 * X - 4 * Y + 3) / 3 + 64 * X * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 16) + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 12),
                             32 * X * (4 * X - 1) - 16 * X * (-4 * X - 4 * Y + 3) - 16 * X * (-4 * X - 4 * Y + 4) + (
                                     4 - 16 * X) * (-4 * X - 4 * Y + 4) - 4 * (4 * X - 1) * (-4 * X - 4 * Y + 3),
                             -32 * X * (4 * X - 2) / 3 - 32 * X * (4 * X - 1) / 3 - 4 * (8 * X / 3 - 2 / 3) * (
                                     4 * X - 2),
                             -128 * X * Y - 32 * X * (4 * X - 1) + 32 * X * (-4 * X - 4 * Y + 4) - 32 * Y * (
                                     4 * X - 1) + (32 * X - 8) * (-4 * X - 4 * Y + 4),
                             -128 * X * Y - 32 * X * (4 * Y - 1) - 32 * Y * (4 * Y - 1) + 32 * Y * (
                                     -4 * X - 4 * Y + 4) + (32 * Y - 8) * (-4 * X - 4 * Y + 4),
                             256 * X * Y - 32 * X * (-4 * X - 4 * Y + 3) - 32 * X * (-4 * X - 4 * Y + 4) - 32 * Y * (
                                     -4 * X - 4 * Y + 3) - 32 * Y * (-4 * X - 4 * Y + 4) + (
                                     -32 * X - 32 * Y + 24) * (-4 * X - 4 * Y + 4)])

    def fx2(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([4, 0, 4, 0, 0, -8])
        if d == 3:
            return np.array([27 * X - 9, 0, -27 * X - 27 * Y + 18, 27 * Y, 0, 0, 27 * Y, 81 * X + 54 * Y - 45,
                             -81 * X - 27 * Y + 36, -54 * Y])

        if d == 4:
            return np.array([16 * X * (4 * X - 3) / 3 + 16 * X * (4 * X - 2) / 3 + 16 * X * (4 * X - 1) / 3 + (
                    2 * X / 3 - 1 / 6) * (16 * X - 12) + (2 * X / 3 - 1 / 6) * (16 * X - 8) + (8 * X / 3 - 2) * (
                                     4 * X - 2) + (8 * X / 3 - 2 / 3) * (4 * X - 3) + (8 * X / 3 - 2 / 3) * (
                                     4 * X - 2) + 2 * (4 * X - 3) * (4 * X - 2) / 3, 0,
                             2 * (-64 * X - 64 * Y + 32) * (-X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 48) * (
                                     -X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 64) * (
                                     -X / 6 - Y / 6 + 1 / 24) + 4 * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 - (-4 * X - 4 * Y + 3) * (16 * X + 16 * Y - 8) / 6 - (
                                     -4 * X - 4 * Y + 4) * (16 * X + 16 * Y - 8) / 6 + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 12) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 12),
                             256 * X * Y / 3 + 64 * Y * (4 * X - 2) / 3 + 64 * Y * (4 * X - 1) / 3,
                             32 * Y * (4 * Y - 1), 0, 0, 32 * Y * (4 * Y - 1),
                             64 * Y * (-4 * X - 4 * Y + 2) / 3 + 64 * Y * (-4 * X - 4 * Y + 3) / 3 + 64 * Y * (
                                     -4 * X - 4 * Y + 4) / 3,
                             64 * X * (-4 * X - 4 * Y + 2) / 3 + 64 * X * (-4 * X - 4 * Y + 3) / 3 + 64 * X * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 + (-4 * X - 4 * Y + 3) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 8) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3) + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 16) + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 12),
                             32 * X * (4 * X - 1) - 32 * X * (-4 * X - 4 * Y + 3) - 32 * X * (-4 * X - 4 * Y + 4) + (
                                     4 - 16 * X) * (-4 * X - 4 * Y + 3) + 2 * (4 - 16 * X) * (
                                     -4 * X - 4 * Y + 4) - 4 * (4 * X - 1) * (-4 * X - 4 * Y + 3) + 2 * (
                                     -16 * X - 16 * Y + 12) * (-4 * X - 4 * Y + 4),
                             -64 * X * (4 * X - 2) / 3 - 64 * X * (4 * X - 1) / 3 + 64 * X * (
                                     -4 * X - 4 * Y + 4) / 3 + (8 / 3 - 32 * X / 3) * (4 * X - 2) - 4 * (
                                     8 * X / 3 - 2 / 3) * (4 * X - 2) + 2 * (32 * X / 3 - 16 / 3) * (
                                     -4 * X - 4 * Y + 4) + 2 * (32 * X / 3 - 8 / 3) * (-4 * X - 4 * Y + 4),
                             -256 * X * Y - 64 * Y * (4 * X - 1) + 64 * Y * (-4 * X - 4 * Y + 4), -64 * Y * (4 * Y - 1),
                             256 * X * Y - 64 * Y * (-4 * X - 4 * Y + 3) - 64 * Y * (-4 * X - 4 * Y + 4)])

    def fy2(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 4, 4, 0, -8, 0])
        if d == 3:
            return np.array(
                [0, 27 * Y - 9, -27 * X - 27 * Y + 18, 0, 27 * X, -27 * X - 81 * Y + 36, 54 * X + 81 * Y - 45, 27 * X,
                 0, -54 * X])
        if d == 4:
            return np.array([0, 16 * Y * (4 * Y - 3) / 3 + 16 * Y * (4 * Y - 2) / 3 + 16 * Y * (4 * Y - 1) / 3 + (
                    2 * Y / 3 - 1 / 6) * (16 * Y - 12) + (2 * Y / 3 - 1 / 6) * (16 * Y - 8) + (8 * Y / 3 - 2) * (
                                     4 * Y - 2) + (8 * Y / 3 - 2 / 3) * (4 * Y - 3) + (8 * Y / 3 - 2 / 3) * (
                                     4 * Y - 2) + 2 * (4 * Y - 3) * (4 * Y - 2) / 3,
                             2 * (-64 * X - 64 * Y + 32) * (-X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 48) * (
                                     -X / 6 - Y / 6 + 1 / 24) + (-64 * X - 64 * Y + 64) * (
                                     -X / 6 - Y / 6 + 1 / 24) + 4 * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 - (-4 * X - 4 * Y + 3) * (16 * X + 16 * Y - 8) / 6 - (
                                     -4 * X - 4 * Y + 4) * (16 * X + 16 * Y - 8) / 6 + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 3) * (16 * X + 16 * Y - 12) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 16) + (
                                     2 * X / 3 + 2 * Y / 3 - 1 / 6) * (16 * X + 16 * Y - 12), 0,
                             32 * X * (4 * X - 1),
                             256 * X * Y / 3 + 64 * X * (4 * Y - 2) / 3 + 64 * X * (4 * Y - 1) / 3,
                             -64 * Y * (4 * Y - 2) / 3 - 64 * Y * (4 * Y - 1) / 3 + 64 * Y * (
                                     -4 * X - 4 * Y + 4) / 3 + (8 / 3 - 32 * Y / 3) * (4 * Y - 2) - 4 * (
                                     8 * Y / 3 - 2 / 3) * (4 * Y - 2) + 2 * (32 * Y / 3 - 16 / 3) * (
                                     -4 * X - 4 * Y + 4) + 2 * (32 * Y / 3 - 8 / 3) * (-4 * X - 4 * Y + 4),
                             32 * Y * (4 * Y - 1) - 32 * Y * (-4 * X - 4 * Y + 3) - 32 * Y * (-4 * X - 4 * Y + 4) + (
                                     4 - 16 * Y) * (-4 * X - 4 * Y + 3) + 2 * (4 - 16 * Y) * (
                                     -4 * X - 4 * Y + 4) - 4 * (4 * Y - 1) * (-4 * X - 4 * Y + 3) + 2 * (
                                     -16 * X - 16 * Y + 12) * (-4 * X - 4 * Y + 4),
                             64 * Y * (-4 * X - 4 * Y + 2) / 3 + 64 * Y * (-4 * X - 4 * Y + 3) / 3 + 64 * Y * (
                                     -4 * X - 4 * Y + 4) / 3 - 8 * (-4 * X - 4 * Y + 3) * (
                                     -4 * X - 4 * Y + 4) / 3 + (-4 * X - 4 * Y + 3) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 8) + (-4 * X - 4 * Y + 4) * (
                                     32 * X / 3 + 32 * Y / 3 - 16 / 3) + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 16) + (-8 * X / 3 - 8 * Y / 3 + 4 / 3) * (
                                     16 * X + 16 * Y - 12),
                             64 * X * (-4 * X - 4 * Y + 2) / 3 + 64 * X * (-4 * X - 4 * Y + 3) / 3 + 64 * X * (
                                     -4 * X - 4 * Y + 4) / 3, 32 * X * (4 * X - 1), 0, -64 * X * (4 * X - 1),
                             -256 * X * Y - 64 * X * (4 * Y - 1) + 64 * X * (-4 * X - 4 * Y + 4),
                             256 * X * Y - 64 * X * (-4 * X - 4 * Y + 3) - 64 * X * (-4 * X - 4 * Y + 4)])

    def fx2y(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, -27, 27, 0, 0, 27, 54, -27, -54])
        if d == 4:
            return np.array([0, 0, 256 * X + 256 * Y - 160, 256 * X - 64, 256 * Y - 32, 0, 0, 256 * Y - 32,
                             -256 * X - 512 * Y + 192, -768 * X - 512 * Y + 384, 768 * X + 256 * Y - 288, 64 - 256 * X,
                             -768 * X - 512 * Y + 320, 64 - 512 * Y, 768 * X + 1024 * Y - 448])

    def fxy2(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, -27, 0, 27, -27, 54, 27, 0, -54])
        if d == 4:
            return np.array(
                [0, 0, 256 * X + 256 * Y - 160, 0, 256 * X - 32, 256 * Y - 64, 64 - 256 * Y, 256 * X + 768 * Y - 288,
                 -512 * X - 768 * Y + 384, -512 * X - 256 * Y + 192, 256 * X - 32, 0, 64 - 512 * X,
                 -512 * X - 768 * Y + 320, 1024 * X + 768 * Y - 448])

    def fx2y2(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 256, 0, 256, 0, 0, 256, -512, -512, 256, 0, -512, -512, 1024])

    def fx3(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([27, 0, -27, 0, 0, 0, 0, 81, -81, 0])
        if d == 4:
            return np.array(
                [256 * X - 96, 0, 256 * X + 256 * Y - 160, 256 * Y, 0, 0, 0, 0, -256 * Y, -1024 * X - 768 * Y + 576,
                 1536 * X + 768 * Y - 768, -1024 * X - 256 * Y + 448, -768 * Y, 0, 768 * Y])

    def fy3(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 27, -27, 0, 0, -81, 81, 0, 0, 0])
        if d == 4:
            return np.array([0, 256 * Y - 96, 256 * X + 256 * Y - 160, 0, 0, 256 * X, -256 * X - 1024 * Y + 448,
                             768 * X + 1536 * Y - 768, -768 * X - 1024 * Y + 576, -256 * X, 0, 0, 0, -768 * X, 768 * X])

    def fx3y3(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    def fx4(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([256, 0, 256, 0, 0, 0, 0, 0, 0, -1024, 1536, -1024, 0, 0, 0])

    def fy4(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 256, 0, 0, 256, -256, 768, -768, -256, 0, 0, 0, -768, 768])

    def fx4y4(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    def fx3y(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 256, 256, 0, 0, 0, 0, -256, -768, 768, -256, -768, 0, 768])

    def fxy3(self):
        d = self.d
        X = self.X
        Y = self.Y
        if d == 1:
            return np.array([0, 0, 0])
        if d == 2:
            return np.array([0, 0, 0, 0, 0, 0])
        if d == 3:
            return np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        if d == 4:
            return np.array([0, 0, 256, 0, 0, 256, -256, 768, -768, -256, 0, 0, 0, -768, 768])


# if __name__ == "__main__":
#     F = Lagsf2(X=0, Y=0, d=4)
#     print(F.fxy3())
