import numpy as np
import sympy as sym

class Lagbsf(object):

    def __init__(self, X,h, d):

        self.X = X
        self.h = h
        self.d = d

    def f(self):
        d = self.d
        h = self.h
        X = self.X
        n1 = .25 * (1 - X) **2 * (2 + X);
        n2 = h * .125 * (1 - X)**2 * (1 + X);
        n3 = .25 * (1 + X) **2 * (2 - X);
        n4 = h * .125 * (1 + X)**2 * (X - 1);
        if d == 1:
            return np.array([n1, n2, n3, n4])
        if d == 2:
            return np.array([0.5 * X * (X - 1.0), 0.5 * X * (X + 1.0), -1.0 * (X - 1.0) * (X + 1.0)])
        if d == 3:
            return np.array([-0.5625 * (X - 1.0) * (X - 0.333333333333333) * (X + 0.333333333333333),
                             0.5625 * (X - 0.333333333333333) * (X + 0.333333333333333) * (X + 1.0),
                             1.6875 * (X - 1.0) * (X - 0.333333333333333) * (X + 1.0),
                             -1.6875 * (X - 1.0) * (X + 0.333333333333333) * (X + 1.0)])
        if d == 4:
            return np.array([0.666666666666667 * X * (X - 1.0) * (X - 0.5) * (X + 0.5),
                             0.666666666666667 * X * (X - 0.5) * (X + 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X - 0.5) * (X + 1.0),
                             4.0 * (X - 1.0) * (X - 0.5) * (X + 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X + 0.5) * (X + 1.0)])
        if d == 5:
            return np.array([-0.813802083333333 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 0.6),
                             0.813802083333334 * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 0.6) * (X + 1.0),
                             4.06901041666666 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.2) * (X + 1.0),
                             -8.13802083333333 * (X - 1.0) * (X - 0.6) * (X - 0.2) * (X + 0.6) * (X + 1.0),
                             8.13802083333333 * (X - 1.0) * (X - 0.6) * (X + 0.2) * (X + 0.6) * (X + 1.0),
                             -4.06901041666667 * (X - 1.0) * (X - 0.2) * (X + 0.2) * (X + 0.6) * (X + 1.0)])

    def fx(self):
        d = self.d
        h = self.h
        X = self.X
        n1 = .25 * (1 - X) ** 2 * (2 + X);
        n2 = h * .125 * (1 - X) ** 2 * (1 + X);
        n3 = .25 * (1 + X) ** 2 * (2 - X);
        n4 = h * .125 * (1 + X) ** 2 * (X - 1);
        dn1 = (sym.diff(n1, X));
        dn2 = (sym.diff(n2, X));
        dn3 = (sym.diff(n3, X));
        dn4 = (sym.diff(n4, X));
        if d == 1:
            return np.array([dn1, dn2, dn3, dn4])
        if d == 2:
            return np.array([1.0 * X - 0.5, 1.0 * X + 0.5, -2.0 * X])
        if d == 3:
            return np.array([(0.5625 - 0.5625 * X) * (X - 0.333333333333333) + (-0.5625 * X - 0.1875) * (X - 1.0) + (
                        -0.5625 * X - 0.1875) * (X - 0.333333333333333),
                             (0.5625 * X + 0.1875) * (X - 0.333333333333333) + (0.5625 * X + 0.5625) * (
                                         X - 0.333333333333333) + (0.5625 * X + 0.5625) * (X + 0.333333333333333),
                             (X - 1.0) * (1.6875 * X + 1.6875) + (X - 0.333333333333333) * (1.6875 * X - 1.6875) + (
                                         X - 0.333333333333333) * (1.6875 * X + 1.6875),
                             (-1.6875 * X - 1.6875) * (X - 1.0) + (-1.6875 * X - 1.6875) * (X + 0.333333333333333) + (
                                         -1.6875 * X - 0.5625) * (X - 1.0)])
        if d == 4:
            return np.array([0.666666666666667 * X * (X - 1.0) * (X - 0.5) + 0.666666666666667 * X * (X - 1.0) * (
                        X + 0.5) + 0.666666666666667 * X * (X - 0.5) * (X + 0.5) + (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 1.0) * (X - 0.5),
                             0.666666666666667 * X * (X - 0.5) * (X + 0.5) + 0.666666666666667 * X * (X - 0.5) * (
                                         X + 1.0) + 0.666666666666667 * X * (X + 0.5) * (X + 1.0) + (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5) * (X + 1.0),
                             -2.66666666666667 * X * (X - 1.0) * (X - 0.5) - 2.66666666666667 * X * (X - 1.0) * (
                                         X + 1.0) - 2.66666666666667 * X * (X - 0.5) * (X + 1.0) + (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) * (X - 0.5),
                             (X - 1.0) * (X - 0.5) * (4.0 * X + 2.0) + (X - 1.0) * (X - 0.5) * (4.0 * X + 4.0) + (
                                         X - 1.0) * (X + 1.0) * (4.0 * X + 2.0) + (X - 0.5) * (X + 1.0) * (
                                         4.0 * X + 2.0),
                             -2.66666666666667 * X * (X - 1.0) * (X + 0.5) - 2.66666666666667 * X * (X - 1.0) * (
                                         X + 1.0) - 2.66666666666667 * X * (X + 0.5) * (X + 1.0) + (
                                         -2.66666666666667 * X - 1.33333333333333) * (X - 1.0) * (X + 1.0)])
        if d == 5:
            return np.array([(-0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                        -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) + (-0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (
                                         X - 0.2) * (X + 0.6) + (-0.813802083333333 * X - 0.162760416666667) * (
                                         X - 0.6) * (X - 0.2) * (X + 0.6),
                             (0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X - 0.2) * (X + 0.6) + (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X - 0.2) * (
                                         X + 0.2) + (0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (
                                         X - 0.2) * (X + 0.6) + (0.813802083333334 * X + 0.813802083333334) * (
                                         X - 0.6) * (X + 0.2) * (X + 0.6) + (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.2) * (X + 0.6),
                             (X - 1.0) * (X - 0.6) * (X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + (
                                         X - 1.0) * (X - 0.6) * (X - 0.2) * (
                                         4.06901041666666 * X + 4.06901041666666) + (X - 1.0) * (X - 0.6) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + (X - 1.0) * (
                                         X - 0.2) * (X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + (
                                         X - 0.6) * (X - 0.2) * (X + 0.2) * (4.06901041666666 * X + 4.06901041666666),
                             (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) * (X - 0.2) + (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) + (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (
                                         X - 0.2) * (X + 0.6) + (-8.13802083333333 * X - 8.13802083333333) * (
                                         X - 0.6) * (X - 0.2) * (X + 0.6) + (-8.13802083333333 * X - 4.8828125) * (
                                         X - 1.0) * (X - 0.6) * (X - 0.2),
                             (X - 1.0) * (X - 0.6) * (X + 0.2) * (8.13802083333333 * X + 8.13802083333333) + (
                                         X - 1.0) * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) * (8.13802083333333 * X + 8.13802083333333) + (X - 1.0) * (
                                         X + 0.2) * (X + 0.6) * (8.13802083333333 * X + 8.13802083333333) + (
                                         X - 0.6) * (X + 0.2) * (X + 0.6) * (8.13802083333333 * X + 8.13802083333333),
                             (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) * (X + 0.2) + (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) + (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (
                                         X + 0.2) * (X + 0.6) + (-4.06901041666667 * X - 4.06901041666667) * (
                                         X - 0.2) * (X + 0.2) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6)])

    def fx2(self):
        d = self.d
        h = self.h
        X = self.X
        n1 = .25 * (1 - X) ** 2 * (2 + X);
        n2 = h * .125 * (1 - X) ** 2 * (1 + X);
        n3 = .25 * (1 + X) ** 2 * (2 - X);
        n4 = h * .125 * (1 + X) ** 2 * (X - 1);
        ddn1=(sym.diff(sym.diff(n1,X)));
        ddn2 = (sym.diff(sym.diff(n2, X)));
        ddn3 = (sym.diff(sym.diff(n3, X)));
        ddn4 = (sym.diff(sym.diff(n4, X)));
        if d == 1:
            return np.array([ddn1, ddn2,ddn3,ddn4])
        if d == 2:
            return np.array([1.00000000000000, 1.00000000000000, -2.00000000000000])
        if d == 3:
            return np.array([1.125 - 3.375 * X, 3.375 * X + 1.125, 10.125 * X - 1.125, -10.125 * X - 1.125])
        if d == 4:
            return np.array([1.33333333333333 * X * (X - 1.0) + 1.33333333333333 * X * (
                        X - 0.5) + 1.33333333333333 * X * (X + 0.5) + 2 * (
                                         0.666666666666667 * X - 0.333333333333333) * (X - 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5),
                             1.33333333333333 * X * (X - 0.5) + 1.33333333333333 * X * (
                                         X + 0.5) + 1.33333333333333 * X * (X + 1.0) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X - 0.5) + 2 * (
                                         0.666666666666667 * X + 0.333333333333333) * (X + 1.0) + 2 * (
                                         0.666666666666667 * X + 0.666666666666667) * (X - 0.5),
                             -5.33333333333333 * X * (X - 1.0) - 5.33333333333333 * X * (
                                         X - 0.5) - 5.33333333333333 * X * (X + 1.0) + (
                                         1.33333333333333 - 2.66666666666667 * X) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 0.5) - 2.66666666666667 * (
                                         X - 1.0) * (X - 0.5),
                             2 * (X - 1.0) * (4.0 * X - 2.0) + 2 * (X - 1.0) * (4.0 * X + 2.0) + 2 * (X - 1.0) * (
                                         4.0 * X + 4.0) + 2 * (X - 0.5) * (4.0 * X + 2.0) + 2 * (X - 0.5) * (
                                         4.0 * X + 4.0) + 2 * (X + 1.0) * (4.0 * X + 2.0),
                             -5.33333333333333 * X * (X - 1.0) - 5.33333333333333 * X * (
                                         X + 0.5) - 5.33333333333333 * X * (X + 1.0) + (
                                         -2.66666666666667 * X - 2.66666666666667) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 1.33333333333333) * (X - 1.0) + 2 * (
                                         -2.66666666666667 * X - 1.33333333333333) * (X + 1.0) - 2.66666666666667 * (
                                         X - 1.0) * (X + 1.0)])
        if d == 5:
            return np.array([(-0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.6) + (
                        -0.813802083333333 * X - 0.48828125) * (X - 1.0) * (X - 0.2) + (
                                         -0.813802083333333 * X - 0.48828125) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.6) * (X + 0.6) + 2 * (
                                         -0.813802083333333 * X - 0.162760416666667) * (X - 0.2) * (
                                         X + 0.6) - 1.62760416666667 * (X - 1.0) * (X - 0.6) * (
                                         X - 0.2) - 0.813802083333333 * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) - 0.813802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 0.813802083333333 * (X - 0.6) * (X - 0.2) * (X + 0.6),
                             2 * (0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.162760416666667) * (X - 0.6) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.162760416666667) * (X - 0.2) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.48828125) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X - 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X + 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.6) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.2) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X - 0.2) * (X + 0.6) + 2 * (
                                         0.813802083333334 * X + 0.813802083333334) * (X + 0.2) * (X + 0.6),
                             2 * (X - 1.0) * (X - 0.6) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 1.0) * (
                                         X - 0.6) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 1.0) * (
                                         X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 1.0) * (
                                         X - 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 1.0) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X - 4.06901041666666) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X + 0.813802083333332) + 2 * (X - 0.6) * (
                                         X - 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.6) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666) + 2 * (X - 0.2) * (
                                         X + 0.2) * (4.06901041666666 * X + 4.06901041666666),
                             2 * (-8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.6) * (X - 0.2) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.6) * (X + 0.6) + 2 * (
                                         -8.13802083333333 * X - 8.13802083333333) * (X - 0.2) * (X + 0.6) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) * (X - 0.6) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 1.0) * (X - 0.2) + (
                                         -8.13802083333333 * X - 4.8828125) * (X - 0.6) * (
                                         X - 0.2) - 16.2760416666667 * (X - 1.0) * (X - 0.6) * (
                                         X - 0.2) - 8.13802083333333 * (X - 1.0) * (X - 0.6) * (
                                         X + 0.6) - 8.13802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 8.13802083333333 * (X - 0.6) * (X - 0.2) * (X + 0.6),
                             2 * (X - 1.0) * (X - 0.6) * (8.13802083333333 * X + 1.62760416666667) + 2 * (X - 1.0) * (
                                         X - 0.6) * (8.13802083333333 * X + 4.8828125) + 2 * (X - 1.0) * (X - 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 1.0) * (X + 0.2) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 1.0) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + 2 * (X - 1.0) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 0.6) * (X + 0.2) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 1.62760416666667) + 2 * (X - 0.6) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333) + 2 * (X + 0.2) * (X + 0.6) * (
                                         8.13802083333333 * X + 8.13802083333333),
                             2 * (-4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X - 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X + 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 1.0) * (X + 0.6) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 0.2) * (X + 0.2) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X - 0.2) * (X + 0.6) + 2 * (
                                         -4.06901041666667 * X - 4.06901041666667) * (X + 0.2) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X - 0.2) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 1.0) * (X + 0.6) + (
                                         -4.06901041666667 * X - 0.813802083333333) * (X - 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.2) - 8.13802083333333 * (X - 1.0) * (X - 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 1.0) * (X + 0.2) * (
                                         X + 0.6) - 4.06901041666667 * (X - 0.2) * (X + 0.2) * (X + 0.6)])








